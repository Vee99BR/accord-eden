name: "Manual Branch Re[c]ord"

on:
  workflow_dispatch:
    inputs:
      branch_to_sync:
        description: 'Branch (or branches, comma-separated). Format: branch OR namespace/repo:branch'
        required: true
      clone_method:
        description: 'Choose clone method: "copy" branch (default) OR direct "merge" branch on master'
        required: true
        default: copy
        type: choice
        options:
          - copy
          - merge

jobs:
  sync-branch:
    runs-on: ubuntu-latest

    steps:
      # Set base variables and secrets
      - name: Set variables
        id: vars
        env:
          TOKEN: ${{ secrets.EDEN_MIRROR_TOKEN }}
        run: |
          echo "BRANCHES=${{ github.event.inputs.branch_to_sync }}" >> $GITHUB_OUTPUT
          echo "CLONE_METHOD=${{ github.event.inputs.clone_method }}" >> $GITHUB_OUTPUT
          echo "MIRROR_URL=github.com/Vee99BR/eden-mirror.git" >> $GITHUB_OUTPUT
          echo "DEFAULT_UPSTREAM=https://git.eden-emu.dev/eden-emu/eden.git" >> $GITHUB_OUTPUT
          echo "TOKEN=${TOKEN}" >> $GITHUB_OUTPUT

      # Verify that all requested branches exist in upstream repositories
      - name: Check if branches exist in upstream
        id: upstream
        run: |
          DEFAULT_UPSTREAM=${{ steps.vars.outputs.DEFAULT_UPSTREAM }}
          BRANCHES=${{ steps.vars.outputs.BRANCHES }}
          IFS=',' read -ra BRANCH_LIST <<< "$BRANCHES"

          for RAW in "${BRANCH_LIST[@]}"; do
            RAW=$(echo "$RAW" | xargs)

            REPO_URL="$DEFAULT_UPSTREAM"
            BRANCH="$RAW"

            # Handle special format: namespace/repo:branch
            if [[ "$RAW" == *:* ]]; then
              NS_REPO="${RAW%%:*}"
              BRANCH="${RAW##*:}"
              REPO_URL="https://git.eden-emu.dev/${NS_REPO}.git"
            fi

            echo "🔍 Checking branch '${BRANCH}' in '${REPO_URL}'..."
            UP_HASH=$(git ls-remote "${REPO_URL}" "refs/heads/${BRANCH}" | cut -f1)
            if [ -z "${UP_HASH}" ]; then
              echo "❌ Branch '${BRANCH}' does not exist in ${REPO_URL}."
              exit 1
            fi
            echo "${RAW}=${UP_HASH}" >> $GITHUB_OUTPUT
          done

      # Verify that all requested branches exist in the mirror repository
      - name: Check if branches exist in mirror
        id: mirror
        run: |
          MIRROR_URL=${{ steps.vars.outputs.MIRROR_URL }}
          TOKEN=${{ steps.vars.outputs.TOKEN }}
          BRANCHES=${{ steps.vars.outputs.BRANCHES }}
          IFS=',' read -ra BRANCH_LIST <<< "$BRANCHES"

          for RAW in "${BRANCH_LIST[@]}"; do
            RAW=$(echo "$RAW" | xargs)

            # For mirror we only need the branch name
            if [[ "$RAW" == *:* ]]; then
              BRANCH="${RAW##*:}"
            else
              BRANCH="$RAW"
            fi

            echo "🔍 Checking branch '${BRANCH}' in mirror..."
            GH_HASH=$(git ls-remote "https://x-access-token:${TOKEN}@${MIRROR_URL}" "refs/heads/${BRANCH}" | cut -f1)
            echo "${BRANCH}=${GH_HASH}" >> $GITHUB_OUTPUT
          done

      # Sync or merge branches depending on selected method
      - name: Sync or merge branch
        run: |
          BRANCHES=${{ steps.vars.outputs.BRANCHES }}
          METHOD=${{ steps.vars.outputs.CLONE_METHOD }}
          DEFAULT_UPSTREAM=${{ steps.vars.outputs.DEFAULT_UPSTREAM }}
          MIRROR_URL=${{ steps.vars.outputs.MIRROR_URL }}
          TOKEN=${{ steps.vars.outputs.TOKEN }}

          # Clone the mirror repo using authentication
          git clone "https://x-access-token:${TOKEN}@${MIRROR_URL}" eden-mirror
          cd eden-mirror

          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          IFS=',' read -ra BRANCH_LIST <<< "$BRANCHES"

          for RAW in "${BRANCH_LIST[@]}"; do
            RAW=$(echo "$RAW" | xargs)

            REPO_URL="$DEFAULT_UPSTREAM"
            BRANCH="$RAW"

            # Handle special format: namespace/repo:branch
            if [[ "$RAW" == *:* ]]; then
              NS_REPO="${RAW%%:*}"
              BRANCH="${RAW##*:}"
              REPO_URL="https://git.eden-emu.dev/${NS_REPO}.git"
            fi

            echo "🔎 Processing branch '${BRANCH}' from '${REPO_URL}'"

            if [ "${METHOD}" = "copy" ]; then
              # Copy mode: force overwrite branch in mirror with upstream
              git fetch "${REPO_URL}" "${BRANCH}"
              git checkout -B "${BRANCH}" FETCH_HEAD
              git remote add mirror "https://x-access-token:${TOKEN}@${MIRROR_URL}" || true
              git push mirror "${BRANCH}" --force

            elif [ "${METHOD}" = "merge" ]; then
              # Merge mode: replay commits from upstream branch onto master
              git checkout master
              git remote add upstream "${REPO_URL}" || true
              git fetch upstream "${BRANCH}"

              COMMITS=$(git log master..upstream/"${BRANCH}" --reverse --format="%H")
              for C in ${COMMITS}; do
                echo "Cherry-picking commit ${C} from branch ${BRANCH}..."
                git cherry-pick "${C}" || { echo "❌ Conflict on commit ${C} from ${BRANCH}"; exit 1; }
              done
            fi
          done

          # Push master only when using merge mode
          if [ "${METHOD}" = "merge" ]; then
            git push "https://x-access-token:${TOKEN}@${MIRROR_URL}" master
          fi
