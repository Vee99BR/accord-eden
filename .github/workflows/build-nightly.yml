name: Build Eden Nightly
concurrency:
  group: build-eden-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch: {}

jobs:
  windows:
    runs-on: windows-latest
    name: "Windows (${{ matrix.target }})"
    strategy:
      matrix:
        include:
           - target: x86_64
             qt_arch_target: win64_msvc2022_64
             qt_arch_version: 6.10.0
    env:
      TARGET: ${{ matrix.target }}
      ARCH: ${{ matrix.target }}
      OS: windows
      SCCACHE_GHA_ENABLED: "true"

    steps:
      - name: Clone eden-mirror
        uses: actions/checkout@v4
        with:
          repository: Vee99BR/eden-mirror
          submodules: recursive
          fetch-depth: 0

      - name: Restore vcpkg cache
        uses: actions/cache/restore@v4
        id: vcpkg-cache
        with:
          path: |
            ${{ github.workspace }}/build/vcpkg_installed
            ${{ github.workspace }}/build/externals
            ${{ github.workspace }}/.vcpkg
          key: cache-vcpkg-${{ runner.os }}-${{ matrix.target }}-${{ github.sha }}-${{ github.run_id }}
          restore-keys: cache-vcpkg-${{ runner.os }}-${{ matrix.target }}-

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: Set up MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.target }}

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ matrix.qt_arch_version }}
          host: 'windows'
          target: 'desktop'
          arch: ${{ matrix.qt_arch_target }}
          modules: qtmultimedia qt5compat
          cache: true
          add-tools-to-path: true

      - name: Install Vulkan SDK
        shell: pwsh
        run: |
          sed -i -E 's#^\$ExeFile = ".*"#\$ExeFile = "vulkansdk-windows-X64-\$VulkanSDKVer.exe"#' .ci/windows/install-vulkan-sdk.ps1
          .\.ci\windows\install-vulkan-sdk.ps1

        # Replace /Zi (generate debug info in .pdb) with /Z7 (embed debug info in .obj)
        # This avoids the issue where multiple CL.EXE processes try to write to the same .pdb file,
        # which causes error C1041 when using sccache with MSVC in parallel builds
        #
        # This is a workaround for known sccache limitations on Windows with MSVC
      - name: Fix MSVC PDB conflict for sccache
        shell: bash
        run: sed -i 's|^ninja$|find ../ -name CMakeLists.txt -exec sed -i "s#/Zi#/Z7#g" {} +; ninja|' .ci/windows/build.sh

      - name: Build Eden!
        shell: bash
        run: WINDEPLOYQT="$QT_ROOT_DIR/bin/windeployqt6.exe" .ci/windows/build.sh -DCMAKE_PREFIX_PATH="$QT_ROOT_DIR/lib/cmake/Qt6" -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DDYNARMIC_TESTS=OFF -DYUZU_USE_BUNDLED_QT=OFF -DCMAKE_SYSTEM_PROCESSOR="${{ matrix.target }}"

      - name: Pack Eden!
        shell: bash
        run: ./.ci/windows/package.sh

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: eden-windows-${{ matrix.target }}.zip
          path: artifacts/*

      # See <https://github.com/actions/cache/commit/c74ca4022c9c3055a63985d9a25f9a7cc1ffc5d2>
      - name: Always Save vcpkg Cache
        if: always() && steps.vcpkg-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          key: cache-vcpkg-${{ runner.os }}-${{ matrix.target }}-${{ github.sha }}-${{ github.run_id }}
          path: |
            ${{ github.workspace }}/build/vcpkg_installed
            ${{ github.workspace }}/build/externals
            ${{ github.workspace }}/.vcpkg
